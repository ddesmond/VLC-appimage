# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          APP=vlc
          
          # DOWNLOADING THE DEPENDENCIES
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          wget https://raw.githubusercontent.com/ivan-hc/AM-application-manager/main/tools/pkg2appimage
          chmod a+x ./appimagetool ./pkg2appimage
          
          # CREATING THE APPIMAGE: APPDIR FROM A RECIPE...
          echo "app: VLC
          binpatch: true
          
          ingredients:
            dist: bionic
            sources:
              - deb http://archive.ubuntu.com/ubuntu/ bionic main universe restricted multiverse
              - deb http://archive.ubuntu.com/ubuntu bionic-security main universe restricted multiverse
              - deb http://archive.ubuntu.com/ubuntu/ bionic-updates main universe restricted multiverse
            ppas:
              - savoury1/ffmpeg4
              - savoury1/vlc3
              - savoury1/graphics
              - savoury1/multimedia
              - savoury1/build-tools
              - savoury1/backports
            packages:
              - vlc
              - vlc-l10n
              - vlc-plugin-video-output
              - x264
              - x265
              - libmatroska7
              - libplacebo192
              - libplacebo4" >> recipe.yml;
          
          ./pkg2appimage ./recipe.yml;
          
          # ...DOWNLOADING LIBUNIONPRELOAD...
          wget https://github.com/project-portable/libunionpreload/releases/download/amd64/libunionpreload.so
          chmod a+x libunionpreload.so
          mv ./libunionpreload.so ./VLC/$APP.AppDir/
          
          # ...REPLACING THE EXISTING APPRUN WITH A CUSTOM ONE...
          rm -R -f ./VLC/$APP.AppDir/AppRun
          function1="'^Exec=.*'"
          function2="'s|%.||g'"
          echo '#!/bin/sh
          HERE="$(dirname "$(readlink -f "${0}")")"
          export UNION_PRELOAD="${HERE}"
          export LD_PRELOAD="${HERE}/libunionpreload.so"
          export PATH="${HERE}"/usr/bin/:"${HERE}"/usr/sbin/:"${HERE}"/usr/games/:"${HERE}"/bin/:"${HERE}"/opt/'$APP'/:"${HERE}"/sbin/:"${PATH}"
          export LD_LIBRARY_PATH="${HERE}"/usr/lib/:"${HERE}"/usr/lib/'$APP'/:"${HERE}"/usr/lib64/'$APP'/:"${HERE}"/usr/lib32/'$APP'/:"${HERE}"/usr/lib/i386-linux-gnu/:"${HERE}"/usr/lib/x86_64-linux-gnu/:"${HERE}"/usr/lib32/:"${HERE}"/usr/lib64/:"${HERE}"/lib/:"${HERE}"/lib/i386-linux-gnu/:"${HERE}"/lib/x86_64-linux-gnu/:"${HERE}"/lib32/:"${HERE}"/lib64/:"${LD_LIBRARY_PATH}"
          export PYTHONPATH="${HERE}"/usr/share/pyshared/:"${HERE}"/usr/lib/python*/:"${PYTHONPATH}"
          export PYTHONHOME="${HERE}"/usr/:"${HERE}"/usr/lib/python*/
          export XDG_DATA_DIRS="${HERE}"/usr/share/:"${HERE}"/usr/share/'$APP'/:"${XDG_DATA_DIRS}"
          export PERLLIB="${HERE}"/usr/share/perl5/:"${HERE}"/usr/lib/perl5/:"${PERLLIB}"
          export GSETTINGS_SCHEMA_DIR="${HERE}"/usr/share/glib-2.0/schemas/:"${GSETTINGS_SCHEMA_DIR}"
          export QT_PLUGIN_PATH="${HERE}"/usr/lib/qt4/plugins/:"${HERE}"/usr/lib/'$APP'/:"${HERE}"/usr/lib64/'$APP'/:"${HERE}"/usr/lib32/'$APP'/:"${HERE}"/usr/lib/i386-linux-gnu/qt4/plugins/:"${HERE}"/usr/lib/x86_64-linux-gnu/qt4/plugins/:"${HERE}"/usr/lib32/qt4/plugins/:"${HERE}"/usr/lib64/qt4/plugins/:"${HERE}"/usr/lib/qt5/plugins/:"${HERE}"/usr/lib/i386-linux-gnu/qt5/plugins/:"${HERE}"/usr/lib/x86_64-linux-gnu/qt5/plugins/:"${HERE}"/usr/lib32/qt5/plugins/:"${HERE}"/usr/lib64/qt5/plugins/:"${QT_PLUGIN_PATH}"
          EXEC=$(grep -e '$function1' "${HERE}"/*.desktop | head -n 1 | cut -d "=" -f 2- | sed -e '$function2')
          exec ${EXEC} "$@"' >> AppRun
          chmod a+x AppRun
          mv ./AppRun ./VLC/$APP.AppDir
          
          # ...EXPORT THE APPDIR TO AN APPIMAGE!
          ARCH=x86_64 ./appimagetool -n ./VLC/$APP.AppDir
          
      # Runs a set of commands using the runners shell
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: VLC*x86_64.AppImage
